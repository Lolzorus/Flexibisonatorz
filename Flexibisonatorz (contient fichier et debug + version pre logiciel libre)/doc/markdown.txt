
üìÑ rapport.md

# Projet : Traducteur de pseudo-langage vers le langage C

## Contexte

Ce projet s‚Äôinscrit dans le cadre d‚Äôun cours de compilation / traitement de langage, et consiste √† d√©velopper un traducteur permettant de convertir un pseudo-langage inspir√© du fran√ßais vers le langage C. Ce traducteur est bas√© sur les outils **Flex** (analyse lexicale) et **Bison** (analyse syntaxique).

## Objectifs

- Concevoir une grammaire simple et intuitive en pseudo-langage.
- G√©n√©rer automatiquement du code C √©quivalent.
- Permettre l‚Äôutilisation de structures de contr√¥le, d‚Äôaffectations, d‚Äôentr√©es/sorties, et de commentaires.

## Fonctionnalit√©s support√©es

- D√©clarations de variables (`int`, `chaine`)
- Affectations et expressions arithm√©tiques
- Instructions d‚Äôaffichage (`afficher`)
- Entr√©es utilisateur (`demander`)
- Instructions conditionnelles (`si`, `sinon`)
- Boucles (`pour ... jusqua ... faire`, `tant que ... faire`)
- Encha√Ænements d‚Äôinstructions avec `et`
- Commentaires

## Structure du projet

- `pseudo.l` : Fichier Flex, responsable de l‚Äôanalyse lexicale.
- `pseudo.y` : Fichier Bison, responsable de l‚Äôanalyse syntaxique et s√©mantique.
- `main.c` : Int√©gr√© dans le Bison, g√©n√®re le code C dans un fichier `output.c`.

## Exemple d‚Äôentr√©e

```pseudo
# ceci est un commentaire
declarer int x comme x = 5
afficher x
si x <= 5 alors afficher "OK" sinon afficher "NON"
pour i = 0 jusqua 3 faire afficher i
tant que x > 0 faire x = x - 1 et afficher x

Code C g√©n√©r√©

#include <stdio.h>
int main() {
// ceci est un commentaire
int x = 5;
printf("%d\n", x);
if (x <= 5) printf("OK\n"); else printf("NON\n");
for (int i = 0; i <= 3; i++) {
printf("%d\n", i);
}
while (x > 0) {
x = (x - 1);
printf("%d\n", x);
}
return 0;
}

Impl√©mentation
Analyse lexicale (traducteur.l)

Chaque mot-cl√© (e.g. afficher, si, pour, etc.) est converti en token. Des r√®gles permettent de d√©tecter :
    les cha√Ænes entre guillemets
    les entiers
    les identifiants
    les op√©rateurs relationnels

Analyse syntaxique (traducteur.y)

Les r√®gles de production traduisent chaque instruction du pseudo-langage en une cha√Æne de caract√®res C, accumul√©e et √©crite dans un fichier output.c.
Table des symboles

Les variables d√©clar√©es sont ajout√©es √† une table symbolique pour assurer leur existence avant usage et d√©terminer leur type.
Difficult√©s rencontr√©es
Gestion de la concat√©nation des instructions avec et dans une boucle ou un bloc
Pr√©servation des types pour les entr√©es/sorties
Gestion des erreurs : variables non d√©clar√©es, types inconnus

Am√©liorations possibles
Ajout de types suppl√©mentaires (float, bool, etc.)
Gestion de fonctions et de blocs plus complexes
D√©tection d‚Äôerreurs plus explicite et color√©e


Lancer le traducteur (version non packagee)

bison -d traducteur.y
flex traducteur.l
gcc traducteur.tab.c lex.yy.c -o traducteur
./traducteur < exemple.txt
cat output.c

Lancement a partir du package debian
instalation
sudo dpkg -i flexibisonatorz-1.0.deb
python3 /usr/share/gui.py